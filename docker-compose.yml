services:
  # Sets up the genesis configuration for the go-ethereum client from a JSON file.
  geth-genesis:
    image: "ethereum/client-go:latest"
    command: --datadir=/execution-data init  /el-cl-genesis-data/custom_config_data/genesis.json
    volumes:
      - ./execution-data:/execution-data
      - ./el-cl-genesis-data:/el-cl-genesis-data

  # Runs the go-ethereum execution client with the specified, unlocked account and necessary
  # APIs to allow for proof-of-stake consensus via Prysm.
  geth:
    image: "ethereum/client-go:latest"
    command:
      - --state.scheme=path
      - --verbosity=4
      - --http
      - --http.api=eth,net,web3
      - --http.addr=0.0.0.0
      - --http.corsdomain=*
      - --ws
      - --ws.api=eth,net,web3
      - --ws.addr=0.0.0.0
      - --ws.origins=*
      - --authrpc.vhosts=*
      - --authrpc.addr=0.0.0.0
      - --authrpc.jwtsecret=/el-cl-genesis-data/jwt/jwtsecret
      - --datadir=/execution-data
      - --allow-insecure-unlock
      - --port=30303
      - --discovery.port=30303
      - --syncmode=full
    ports:
      - 8551:8551
      - 8545:8545
      - 8546:8546
      - 30303:30303
    depends_on:
      geth-genesis:
        condition: service_completed_successfully
      beacon-chain:
        condition: service_started
    volumes:
      - ./execution-data:/execution-data
      - ./el-cl-genesis-data:/el-cl-genesis-data

  # Runs a Prysm beacon chain from a specified genesis state created in the previous step
  # and connects to go-ethereum in the same network as the execution client.
  # The account used in go-ethereum is set as the suggested fee recipient for transactions
  # proposed via the validators attached to the beacon node.
  beacon-chain:
    image: "gcr.io/prysmaticlabs/prysm/beacon-chain:v5.0.0"
    command:
      - --accept-terms-of-use
      - --datadir=/consensus-data
      # No peers to sync with in this testnet, so setting to 0
      - --min-sync-peers=0
      - --chain-config-file=/el-cl-genesis-data/custom_config_data/config.yaml
      - --genesis-state=/el-cl-genesis-data/custom_config_data/genesis.ssz
      - --execution-endpoint=http://geth:8551
      - --bootstrap-node=
      - --interop-eth1data-votes
      # We specify the chain id used by our execution client
      - --contract-deployment-block=0
      - --chain-id=${CHAIN_ID:-32382}
      - --rpc-host=0.0.0.0
      - --grpc-gateway-host=0.0.0.0

      - --jwt-secret=/el-cl-genesis-data/jwt/jwtsecret
      - --suggested-fee-recipient=0x123463a4b065722e99115d6c222f267d9cabb524
      - --minimum-peers-per-subnet=0
      - --enable-debug-rpc-endpoints
      - --force-clear-db
    ports:
      - 4000:4000
      - 3500:3500
      - 8080:8080
      - 6060:6060
      - 9090:9090
    volumes:
      - ./consensus-data:/consensus-data 
      - ./el-cl-genesis-data:/el-cl-genesis-data



  # We run a validator client with 64, deterministically-generated keys that match
  # The validator keys present in the beacon chain genesis state generated a few steps above.
  validator:
    image: "gcr.io/prysmaticlabs/prysm/validator:v5.0.0"
    command:
      - --beacon-rpc-provider=beacon-chain:4000
      - --datadir=/consensus-data
      - --accept-terms-of-use
      - --interop-num-validators=64
      - --interop-start-index=0
      - --chain-config-file=/el-cl-genesis-data/custom_config_data/config.yaml
    depends_on:
      beacon-chain:
        condition: service_started
    volumes:
      - ./el-cl-genesis-data:/el-cl-genesis-data
      - ./consensus-data:/consensus-data

  dora-explorer:
    image: "pk910/dora-the-explorer:latest"
    container_name: "dora-explorer"
    command: -config=/config/config.yaml
    volumes:
      - ./dora:/config
      - ./consensus:/consensus
      # - ./validator-ranges:/validator-ranges
    ports:
      - "9777:8080"
    depends_on:
      beacon-chain:
        condition: service_started
    restart: unless-stopped