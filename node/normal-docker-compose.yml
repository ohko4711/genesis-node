# 普通节点的启动配置,主要区别在于需要指定genesis-node's bootinfo 
services:


  geth:
    image: "ethereum/client-go:latest"
    command:
      - --networkid=245333333
      - --state.scheme=path
      - --verbosity=3
      - --datadir=/execution-data
      - --http
      - --http.addr=0.0.0.0
      - --http.port=8545
      - --http.vhosts=*
      - --http.corsdomain=*
      - --http.api=admin,engine,net,eth,web3,debug
      - --ws
      - --ws.addr=0.0.0.0
      - --ws.port=8546
      - --ws.api=admin,engine,net,eth,web3,debug
      - --ws.origins=*
      - --allow-insecure-unlock
      - --nat=extip:${IP_ADDRESS}
      - --authrpc.port=8551
      - --authrpc.addr=0.0.0.0
      - --authrpc.vhosts=*
      - --authrpc.jwtsecret=/el-cl-genesis-data/jwt/jwtsecret
      - --syncmode=full
      - --rpc.allow-unprotected-txs
      - --port=30303
      - --discovery.port=30303
      - --bootnodes=${EL_BOOTNODES}
    volumes:
      - ./execution-data:/execution-data
      - ../el-cl-genesis-data:/el-cl-genesis-data
    ports:
      - "8545:8545" 
      - "8546:8546" 
      - "8551:8551" 
      - "30303:30303/tcp"
      - "30303:30303/udp"
    restart: unless-stopped

  # Runs a Prysm beacon chain from a specified genesis state created in the previous step
  # and connects to go-ethereum in the same network as the execution client.
  # The account used in go-ethereum is set as the suggested fee recipient for transactions
  # proposed via the validators attached to the beacon node.
  beacon-chain:
    image: "gcr.io/prysmaticlabs/prysm/beacon-chain:v5.3.2"
    command:
      - --verbosity=debug
      - --accept-terms-of-use=true
      - --datadir=/consensus-data
      - --chain-config-file=/el-cl-genesis-data/metadata/config.yaml
      - --genesis-state=/el-cl-genesis-data/metadata/genesis.ssz
      - --execution-endpoint=http://geth:8551
      - --enable-experimental-backfill=true
      - --rpc-host=0.0.0.0
      - --rpc-port=3500
      - --grpc-gateway-host=0.0.0.0
      - --grpc-gateway-corsdomain=*
      - --grpc-gateway-port=4000
      - --p2p-host-ip=${IP_ADDRESS}
      - --p2p-tcp-port=13000
      - --p2p-udp-port=12000
      - --min-sync-peers=0
      - --suggested-fee-recipient=0x6D39C4E60dEf1DfC6d09A8FdB5D075e85F0e5F8d
      - --jwt-secret=/el-cl-genesis-data/jwt/jwtsecret
      - --disable-monitoring=false
      - --monitoring-host=0.0.0.0
      - --monitoring-port=8080
      - --bootstrap-node=${CL_BOOTNODES}
      - --peer=${CL_STATICPEERS}
      - --subscribe-all-subnets=true
      - --p2p-static-id=true
    ports:
      - 4000:4000
      - 3500:3500
      - 8080:8080
      - 6060:6060
      - 9090:9090
      - 12000:12000/udp
      - 13000:13000/tcp
    volumes:
      - ./consensus-data:/consensus-data 
      - ../el-cl-genesis-data:/el-cl-genesis-data
    depends_on:
      - geth


  # We run a validator client with 64, deterministically-generated keys that match
  # The validator keys present in the beacon chain genesis state generated a few steps above.
  # validator:
  #   image: "gcr.io/prysmaticlabs/prysm/validator:v5.3.2"
  #   command:
  #     - --beacon-rpc-gateway-provider=beacon-chain:4000
  #     - --beacon-rpc-provider=beacon-chain:3500
  #     - --datadir=/consensus-data
  #     - --accept-terms-of-use
  #     - --chain-config-file=/el-cl-genesis-data/metadata/config.yaml
  #     # option1. specify the interop mode.
  #     # - --interop-num-validators=64
  #     # - --interop-start-index=0
  #     # option2. specify the wallet dir and password file.
  #     - --wallet-dir=/validator_keys
  #     - --wallet-password-file=/password.txt
  #   depends_on:
  #     beacon-chain:
  #       condition: service_started
  #   volumes:
  #     - ../el-cl-genesis-data:/el-cl-genesis-data
  #     - ./consensus-data:/consensus-data
  #     - ./password.txt:/password.txt
  #     - ./validator_keys:/validator_keys
